DROP      DATAVERSE Test IF EXISTS;
CREATE    DATAVERSE Test;
USE       Test;

CREATE    TYPE GenericType AS { _id: uuid };
CREATE    DATASET NodeDocuments (GenericType)
PRIMARY   KEY _id AUTOGENERATED;

INSERT    INTO NodeDocuments [
  { "node_id": 1, "edges": [1, 2, 3, 4] },
  { "node_id": 2, "edges": [1, 2, 3, 4] },
  { "node_id": 3, "edges": [1, 2, 3, 4] },
  { "node_id": 4, "edges": [1, 2, 3, 4] }
];

DECLARE   GRAPH TestGraph AS
VERTEX    (:N)
         PRIMARY KEY (node_id)
         AS Test.NodeDocuments,
EDGE      (:N)-[:E]->(:N)
         SOURCE KEY (node_id)
         DESTINATION KEY (other_node_id)
         AS ( FROM    NodeDocuments ND
              UNNEST  ND.edges NDE
              SELECT  ND.node_id,
                      NDE as other_node_id );

-- The following must be set to true.
SET       `graphix.schema-decorate.vertex` "always";
SET       `graphix.schema-decorate.edge` "always";

-- We set the following so we can see self-edges (not mandatory).
SET       `graphix.semantics.pattern` "homomorphism";

FROM       GRAPH TestGraph
MATCH      (u)->(v) AS p1
SELECT     p1;